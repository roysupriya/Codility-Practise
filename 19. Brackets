/*
Problem: https://app.codility.com/programmers/lessons/7-stacks_and_queues/brackets/
Results: https://app.codility.com/demo/results/training4GKP54-VMY/  

Time: O(N), Space: O(N)

A string S consisting of N characters is considered to be properly nested if any of the following conditions is true:

S is empty;
S has the form "(U)" or "[U]" or "{U}" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, the string "{[()()]}" is properly nested but "([)()]" is not.

Write a function:

class Solution { public int solution(String S); }

that, given a string S consisting of N characters, returns 1 if S is properly nested and 0 otherwise.

For example, given S = "{[()()]}", the function should return 1 and given S = "([)()]", the function should return 0, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..200,000];
string S is made only of the following characters: '(', '{', '[', ']', '}' and/or ')'.
*/

// you can also use imports, for example:
import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(String S) {

        Stack<Character> stack = new Stack<>();
        Map<Character, Character> map = new HashMap<>();

        /* Maintain a map of symbol pairs 
           key : closing symbol
           value : opening symbol
        */
        map.put(')', '(');
        map.put('}', '{');
        map.put(']', '[');

        for(int i=0; i<S.length(); i++) {
            
            // Push to the stack for any opening symbol
            if(S.charAt(i) == '(' || S.charAt(i) == '{' || S.charAt(i) == '['){
                stack.push(S.charAt(i)); // if we push the closing symbol here instead of actual symbol, map can be avoided
            }

            // For closing symbol, match the stack top with corresponding opening symbol
            else {
                // First symbol is closing symbol
                if(stack.empty()){ 
                    return 0;
                }

                if(stack.peek() != (char) map.get(S.charAt(i))) { //In case of mismatch return from here
                    return 0;
                } else { // in case of match, pop the top symbol and continue
                    stack.pop();
                }
            }
        }
        
        // Stack should be empty after complete traversal for success case
        if(stack.empty())
            return 1;
        else 
            return 0;
    }
}
